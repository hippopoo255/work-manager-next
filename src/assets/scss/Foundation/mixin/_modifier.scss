/* stylelint-disable scss/no-global-function-names */
@use "../variable" as *;
@use "accessibility" as *;
@use "../function/accessibility" as *;
@use "sass:list";
@use "sass:math";

.disabled-style {
  @apply bg-disabled border-disabled text-disabled-dark;
}

@mixin colorModifierByPaletteName(
  $props: (
    "bg",
    "border",
    "text",
  ),
  $options: ()
) {
  // primary, secondary, danger...
  @each $p in $semanticPalette {
    &.--#{$p} {
      // bg, text, border...
      @each $prop in $props {
        @if $p == "disabled" {
          @apply bg-disabled border-disabled text-disabled-dark;

          background-image: none !important;

          @if list.index($options, "disabledNone") {
            @apply pointer-events-none;
          }
        } @else {
          @apply #{$prop}-#{$p};
        }

        // natural, light, dark...
        @each $t in $theme {
          &-#{$t} {
            @if $t == natural and list.index($options, "usingText") {
              @apply text-#{$p}-dark;
            }

            @if $t == light and list.index($options, "usingText") {
              @apply text-black;
            }

            @if $p == "disabled" {
              @apply bg-disabled border-disabled text-disabled-dark;

              background-image: none !important;

              @if list.index($options, "disabledNone") {
                @apply pointer-events-none;
              }
            } @else {
              @apply #{$prop}-#{$p}-#{$t};
            }
          }
        }
      }
    }
  }
  @content;
}

@mixin roundFullModifier() {
  &.--round {
    @apply rounded-full;
    @content;
  }
}

@mixin sizeModifier($el: "button") {
  @each $key, $map in $sizes {
    &.--#{$key} {
      padding-top: px(map-get($map, "space"));
      padding-bottom: px(map-get($map, "space"));

      @if $el == "button" {
        font-size: px(map-get($map, "button-label-size"));
      } @else {
        font-size: px(map-get($map, "font-size"));
      }

      @if $key == "xs" {
        @apply shadow-sm;
      } @else {
        @apply shadow-#{$key};
      }
    }
  }
}

@mixin loadingModifier {
  &.--loading {
    @content;
  }
}

@mixin statusStyle() {
  @each $s in $status {
    $modifier: $s;

    &.--#{$s} {
      @apply opacity-100 text-#{$s} border-l-#{$s};
    }
  }
}
